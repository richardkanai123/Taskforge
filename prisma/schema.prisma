// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  ADMIN
  LEAD
  MEMBER
  CUSTOMER
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  L1
  L2
  L3
  L4
  L5
}

// User model - improved auth handling

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  username      String   @unique
  // Optional for OAuth users
  password      String?
  role          Role     @default(MEMBER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  emailVerified Boolean  @default(false)

  // Auth related
  accounts Account[]
  sessions Session[]

  // Project relationships
  createdProjects  Project[] @relation("CreatedBy")
  leadProjects     Project[] @relation("LeadBy")
  memberProjects   Project[] @relation("ProjectMembers")
  customerProjects Project[] @relation("CustomerOf")
  assignedTasks    Task[]    @relation("AssignedTo")
  comments         Comment[]

  image String?

  @@map("user")
}

// Account model for OAuth providers

model Account {
  id           String   @id @default(cuid())
  userId       String
  accountId    String
  providerId   String
  refreshToken String?  @db.Text
  accessToken  String?  @db.Text
  expiresAt    Int?
  tokenType    String?
  scope        String?
  idToken      String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?

  @@unique([accountId])
  @@map("account")
}

// Session model for auth

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String? // IP address of the user during the session
  userAgent String? // User agent string of the browser during the session

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  token String @unique

  @@map("session")
}

// Email verification tokens

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String // Usually email address
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
  @@map("verification")
}

// Password reset tokens

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

// Project model with improved relationships

model Project {
  id          String        @id @default(cuid())
  title       String
  description String        @db.Text
  status      ProjectStatus @default(OPEN)
  dueDate     DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Creator relationship
  creatorId String
  creator   User   @relation("CreatedBy", fields: [creatorId], references: [id])

  // Lead relationship (optional)
  leadId String?
  lead   User?   @relation("LeadBy", fields: [leadId], references: [id])

  // Customer relationship (optional) - user with CUSTOMER role
  customerId String?
  customer   User?   @relation("CustomerOf", fields: [customerId], references: [id])

  // Members (many-to-many)
  members User[] @relation("ProjectMembers")

  // Tasks in this project
  tasks Task[]

  // github repo
  githubRepo String?
}

// Task model

model Task {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  status      TaskStatus @default(OPEN)
  priority    Priority   @default(L1)
  progress    Int        @default(0) // 0-100
  dueDate     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Project relationship
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Assigned user (owner)
  assignedId String?
  assignedTo User?   @relation("AssignedTo", fields: [assignedId], references: [id])

  // Comments on this task
  comments Comment[]
}

// Comment model

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Task relationship
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Author relationship
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
}
